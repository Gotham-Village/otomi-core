{{- $v := .Values }}
{{- if and (not $v.cluster.useCloudCA) (or (eq $v.teamId "admin") ($v.cluster.isMultitenant)) }}
# collect unique domain names
{{- $domains := list }}
{{- range $s := $v.services }}
{{- $shared := (and $s.isCore (eq $v.teamId "admin") (hasKey $s "isShared")) }}
{{- if and ($s.isCore) (or (hasKey $s "ownHost") $shared) (not (hasKey $s "hasCert")) (not (hasKey $s "host")) }}
{{- $domain := printf "%s.%s" $s.name ($shared | ternary $v.cluster.domain $v.domain) }}
{{- if not (has $domain $domains) }}
  {{- $domains = (append $domains $domain) }}
{{- end }}
{{- end }}
{{- end }}
{{- if eq $v.teamId "admin" -}}
  {{- $proxyDomain := printf "proxy.%s" $v.domain }}
  {{- $domains = (append $domains $proxyDomain) }}
{{- end }}
{{- $appsDomain := printf "apps.%s" $v.domain }}
{{- $domains = (append $domains $appsDomain) }}
{{- range $domain := $domains }}
{{ $name := $domain | replace "." "-" }}
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: {{ $name }}
  namespace: {{ if $v.cluster.hasCloudLB }}ingress{{ else }}istio-system{{ end }}
  labels: {{- include "chart-labels" $ | nindent 4 }}
spec:
  secretName: {{ $name }}
  commonName: "{{ $domain }}"
  dnsNames:
  - "{{ $domain }}"
  issuerRef:
    kind: ClusterIssuer
    name: letsencrypt-{{ $v.certStage }}
  usages:
    - digital signature
    - key encipherment
    - ocsp signing
---
{{- end }}
{{- end }}
