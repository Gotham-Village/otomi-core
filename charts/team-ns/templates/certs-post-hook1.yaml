{{- $v := .Values }}
{{- if and ($v.cluster.useCloudCA) (or (eq $v.name "admin") ($v.cluster.isMultitenant)) }}
apiVersion: batch/v1
kind: Job
metadata:
  name: certs-post-job-1-team-{{ $v.name }}
  labels: {{- include "chart-labels" . | nindent 4 }}
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: certs-post-job-1-team-{{ $v.name }}
      labels:
        app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
        app.kubernetes.io/instance: {{ .Release.Name | quote }}
        helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      restartPolicy: Never
      containers:
      - name: certs-job
        image: "otomi/tools:{{ $v.toolsVersion }}"
        command:
          - sh
          - -c
        args:
          - |
            sleep 5 # needed otherwise we get connection refused on the k8s api
            set -e
{{- if eq $v.cluster.provider "aws" }}
            # request team domain wildcard cert
            certArn=$(aws acm request-certificate \
              --region {{ $v.region }} \
              --domain-name '*.{{ $v.domain }}' \
              --validation-method DNS \
              --idempotency-token '{{ $v.domain | replace "." "" | replace "-" "" }}' \
              --options CertificateTransparencyLoggingPreference=DISABLED | jq -r '.CertificateArn')
            certArns="$certArn"
            {{- range $s := $v.services }}
            {{- if and (not $s.certArn) ($s.domain) }}
            certArn=$(aws acm request-certificate \
              --region {{ $v.region }} \
              --domain-name {{ $s.domain }} \
              --validation-method DNS \
              --idempotency-token '{{ $s.domain | replace "." "" | replace "-" "" }}' \
              --options CertificateTransparencyLoggingPreference=DISABLED | jq -r '.CertificateArn')
            certArns="$certArns$([ \"$certArns\" != \"\" ] && echo ',')$certArn"
            {{- else if $s.certArn }}
            certArns="$certArns$([ \"$certArns\" != \"\" ] && echo ','){{ $s.certArn }}"
            {{- end }}
            {{- end }}
            set +e
            kubectl delete cm cert-arns-team-{{ $v.name }}
            kubectl create cm cert-arns-team-{{ $v.name }} --from-literal=certArns=$certArns
{{- else if eq $v.cluster.provider "google" }}
              # @todo: request domain wildcard cert and add to secret cert-team-{{ $v.name }}
{{- else if eq $v.cluster.provider "azure" }}
              # @todo: request domain wildcard cert and add to secret cert-team-{{ $v.name }}
{{- end }}
{{- end }}