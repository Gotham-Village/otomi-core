{{- $v := .Environment.Values }}
{{- $cm := index $v "cert-manager" }}
templates:
  {{- if ($cm | getOrNil "provider.cloudDns.enabled") }}
  - |
    apiVersion: v1
    kind: Secret
    metadata:
      name: cloud-dns-key
      labels:
        release: cert-manager
    data:
      key.json: {{ $v| getOrNil "google.cloudDns.key" | b64enc }}
  {{- end }}
  {{ range $env := (list "staging" "production") }}
  - |
    apiVersion: cert-manager.io/v1alpha2
    kind: ClusterIssuer
    metadata:
      name: letsencrypt-{{ $env }}
    spec:
      acme:
        server: https://acme{{ (eq $env "staging") | ternary "-staging" "" }}-v02.api.letsencrypt.org/directory
        email: {{ $cm.email }}
        privateKeySecretRef:
          name: letsencrypt-{{ $env }}
        solvers:
          - selector: {}
            dns01:
              {{- if $cm.provider.cloudDns.enabled }}
              clouddns:
                project: {{ $v.google.projectId }}
                serviceAccountSecretRef:
                  name: cloud-dns-key
                  key: key.json
              {{- end }}
  {{- end }}
  - |
    apiVersion: cert-manager.io/v1alpha2
    kind: Certificate
    metadata:
      name: letsencrypt-{{ $cm.stage }}-k8s
      # Istio certs secret lives in the istio-system namespace, and
      # a cert-manager Certificate is namespace-scoped.
      namespace: istio-system
    spec:
      # Reference to the Istio default cert secret.
      secretName: letsencrypt-{{ $cm.stage }}-k8s
      acme:
        config:
        # Each certificate could rely on different ACME challenge
        # solver.  In this example we are using one provider for all
        # the domains.
        - dns01:
            provider: cloud-dns-provider
          domains:
          # Since certificate wildcards only allow one level, we will
          # need to one for every namespace that Knative is used in.
          # We don't need to use wildcard here, fully-qualified domains
          # will work fine too.
          - "*.{{ $v.domain }}"
      # The certificate common name, use one from your domains.
      commonName: "*.{{ $v.domain }}"
      dnsNames:
      # Provide same list as `domains` section.
      - "*.{{ $v.domain }}"
      # Reference to the ClusterIssuer we created in the previous step.
      issuerRef:
        kind: ClusterIssuer
        name: letsencrypt-{{ $cm.stage }}
  {{- range $custId, $cust := $v.customers }}
  - |
    apiVersion: cert-manager.io/v1alpha2
    kind: Certificate
    metadata:
      name: letsencrypt-{{ $cm.stage }}-cust-{{ $custId }}
      namespace: istio-system
    spec:
      secretName: letsencrypt-{{ $cm.stage }}-cust-{{ $custId }}
      acme:
        config:
        - dns01:
            provider: cloud-dns-provider
          domains:
          - "*.{{ $custId }}.{{ $v.customerDomain }}"
          {{- range $nsName, $ns := $cust.namespaces }}
          - "*.{{ $nsName }}.{{ $custId }}.{{ $v.customerDomain }}"
          {{- end }}
      commonName: "*.{{ $custId }}.{{ $v.customerDomain }}"
      dnsNames:
      - "*.{{ $custId }}.{{ $v.customerDomain }}"
      {{- range $nsName, $ns := $cust.namespaces }}
      - "*.{{ $nsName }}.{{ $custId }}.{{ $v.customerDomain }}"
      {{- end }}
      # Reference to the ClusterIssuer we created in the previous step.
      issuerRef:
        kind: ClusterIssuer
        name: letsencrypt-{{ $cm.stage }}
  {{- end }}