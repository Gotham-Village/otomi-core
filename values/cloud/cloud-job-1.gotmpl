{{- $v := .Environment.Values }}
{{- $cm := index $v.charts "cert-manager" }}
{{- $cluster := index $v.clusters $v.provider }}
{{- $domain := printf "admin.%s.%s" $v.stage $cluster.host }}
resources:
{{- if $v.useCloudCA }}
- apiVersion: batch/v1
  kind: Job
  metadata:
    name: certs-job-1
    labels:
      app.kubernetes.io/app: certs-job
      app.kubernetes.io/managed-by: cloud-raw
  spec:
    template:
      metadata:
        name: certs-job-1
        labels:
          app.kubernetes.io/app: certs-job-1
          app.kubernetes.io/managed-by: cloud-raw
        annotations:
          sidecar.istio.io/inject: "false"
      spec:
        restartPolicy: Never
        serviceAccountName: admin
        containers:
        - name: certs-job-1
          image: "otomi/tools:{{ $v.toolsVersion }}"
          command:
            - sh
            - -c
          args:
            - |
              sleep 5 # needed otherwise we get connection refused on the k8s api
              set -e
{{- if eq $v.provider "aws" }}
              # request domain wildcard cert
              certArn=$(aws acm request-certificate \
                --region {{ $cluster.region }} \
                --domain-name {{ $domain }} \
                --validation-method DNS \
                --idempotency-token '{{ $domain | replace "." "" }}' \
                --options CertificateTransparencyLoggingPreference=DISABLED | jq -r '.CertificateArn')
              set +e
              kubectl delete cm cert-arns
              kubectl create cm cert-arns --from-literal=certArns=$certArn
{{- else if eq $v.provider "google" }}
              # @todo: request domain wildcard cert and add to secret azure-ca-{{ $cm.stage }}-k8s
{{- else if eq $v.provider "azure" }}
              # @todo: request domain wildcard cert and add to secret google-ca-{{ $cm.stage }}-k8s
{{- end }}
{{- end }}