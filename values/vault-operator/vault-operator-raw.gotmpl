{{- $v := .Environment.Values }}
{{- $k := $v | get "charts.keycloak" dict }}
{{- $tc := $v.teamConfig }}
{{- $seal := dict "provider" "kubernetes"}}
resources:
  - apiVersion: "vault.banzaicloud.com/v1alpha1"
    kind: "Vault"
    metadata:
      name: "vault"
    spec:
      size: 1
      image: vault:1.6.1
      # specify a custom bank-vaults image with bankVaultsImage:
      # bankVaultsImage: ghcr.io/banzaicloud/bank-vaults:latest

      # Common annotations for all created resources
      annotations:
        common/annotation: "true"

      # Vault Pods , Services and TLS Secret annotations
      vaultAnnotations:
        type/instance: "vault"

      # Vault Configurer Pods and Services annotations
      vaultConfigurerAnnotations:
        type/instance: "vaultconfigurer"

      # Vault Pods , Services and TLS Secret labels
      vaultLabels:
        example.com/log-format: "json"

      # Vault Configurer Pods and Services labels
      vaultConfigurerLabels:
        example.com/log-format: "string"

      # Support for nodeAffinity Rules
      # nodeAffinity:
      #   requiredDuringSchedulingIgnoredDuringExecution:
      #     nodeSelectorTerms:
      #     - matchExpressions:
      #       - key : "node-role.kubernetes.io/your_role"
      #         operator: In
      #         values: ["true"]

      # Support for pod nodeSelector rules to control which nodes can be chosen to run
      # the given pods
      # nodeSelector:
      #   "node-role.kubernetes.io/your_role": "true"

      # Support for node tolerations that work together with node taints to control
      # the pods that can like on a node
      # tolerations:
      # - effect: NoSchedule
      #   key: node-role.kubernetes.io/your_role
      #   operator: Equal
      #   value: "true"

      # Specify the ServiceAccount where the Vault Pod and the Bank-Vaults configurer/unsealer is running
      serviceAccount: vault

      # Specify the Service's type where the Vault Service is exposed
      # Please note that some Ingress controllers like https://github.com/kubernetes/ingress-gce
      # forces you to expose your Service on a NodePort
      serviceType: ClusterIP

      # Specify existing secret contains TLS certificate (accepted secret type: kubernetes.io/tls)
      # If it is set, generating certificate will be disabled
      # existingTlsSecretName: selfsigned-cert-tls

      # Specify threshold for renewing certificates. Valid time units are "ns", "us", "ms", "s", "m", "h".
      # tlsExpiryThreshold: 168h

      # Request an Ingress controller with the default configuration
      ingress:
        # Specify Ingress object annotations here, if TLS is enabled (which is by default)
        # the operator will add NGINX, Traefik and HAProxy Ingress compatible annotations
        # to support TLS backends
        annotations:
        # Override the default Ingress specification here
        # This follows the same format as the standard Kubernetes Ingress
        # See: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#ingressspec-v1beta1-extensions
        spec: {}

      # Use local disk to store Vault file data, see config section.
      volumes:
        - name: vault-file
          persistentVolumeClaim:
            claimName: vault-file

      volumeMounts:
        - name: vault-file
          mountPath: /vault/file

      # Support for distributing the generated CA certificate Secret to other namespaces.
      # Define a list of namespaces or use ["*"] for all namespaces.
      caNamespaces: []

      # Describe where you would like to store the Vault unseal keys and root token.
      unsealConfig:
        options:
          # The preFlightChecks flag enables unseal and root token storage tests
          # This is true by default
          preFlightChecks: true
        # WARNING: It is not supported to change the secrets namespace once initialization happened. If you change it in the CR you have to move secrets to new namesoace manually.
        {{ if eq $seal.provider "kubernetes" }}
        kubernetes:
          secretNamespace: vault
        {{ else if eq $seal.provider "azure" }}
        azure:
          keyVaultName: {{ $seal.keyVaultName }}
        {{ else if eq $seal.provider "aws" }}
        aws:
          kmsKeyId: {{ $seal.kmsKeyId }}
          kmsRegion: {{ $seal.kmsRegion }}
          s3Bucket: {{ $seal.s3Bucket }}
          s3Prefix: {{ $seal.s3Prefix }}
          s3Region: {{ $seal.s3Region }}
        {{ else if eq $seal.provider "google" }}
        google:
          kmsKeyRing: {{ $seal.kmsKeyRing }}
          kmsCryptoKey: {{ $seal.kmsCryptoKey }}
          kmsLocation: {{ $seal.kmsLocation }}
          kmsProject: {{ $seal.kmsProject }}
          storageBucket: {{ $seal.storageBucket }}
        {{ end }}

      # A YAML representation of a final vault config file.
      # See https://www.vaultproject.io/docs/configuration/ for more information.
      config:
        storage:
          # inmem: {}
          file:
            path: "${ .Env.VAULT_STORAGE_FILE }" # An example how Vault config environment interpolation can be used
        listener:
          tcp:
            address: "0.0.0.0:8200"
            # Uncommenting the following line and deleting tls_cert_file and tls_key_file disables TLS
            tls_disable: true
            # tls_cert_file: /vault/tls/server.crt
            # tls_key_file: /vault/tls/server.key
        telemetry:
          statsd_address: localhost:9125
        ui: true

      # See: https://banzaicloud.com/docs/bank-vaults/cli-tool/#example-external-vault-configuration
      # The repository also contains a lot examples in the deploy/ and operator/deploy directories.
      externalConfig:
        policies:
          - name: allow-read-all-secrets
            rules: path "secret/*" {
                    capabilities = ["read", "list"]
                  }
          - name: allow-list-all-secrets
            rules: path "secret/*" {
                    capabilities = ["list"]
                  }
          - name: allow_sandbox
            rules: path "secret/data/sandbox/*" {
                    capabilities = ["create", "read", "update", "delete", "list"]
                  }
          {{- range $teamId, $team := $tc.teams }}
          - name: allow-team-{{ $teamId }}
            rules: path "secret/data/teams/team-{{ $teamId }}/*" {
                    capabilities = ["create", "update", "read", "delete", "list"]
                  }
          {{- end }}
          - name: allow-all-secrets
            rules: path "secret/*" {
                    capabilities = ["create", "update", "read", "delete", "list"]
                  }
        auth:
          - type: oidc
            config:
              oidc_discovery_url: https://keycloak.{{ $v.cluster.domain }}/realms/master
              oidc_client_id: {{ $k.idp.clientID }}
              oidc_client_secret: {{ $k.idp.clientSecret }}
              namespace_in_state: true
              default_role: team
            roles:
            - name: team
              user_claim: email
              groups_claim: groups
              # This policy will be applied to each user that uses this role
              token_policies: [allow-list-all-secrets, allow_sandbox]
              ttl: 1h
              #  http://localhost:8250/oidc/callback - for: vault login -method oidc
              allowed_redirect_uris: "http://localhost:8250/oidc/callback,https://vault.{{ $v.cluster.domain }}/ui/vault/auth/oidc/oidc/callback"
          - type: kubernetes
            roles:
              # Allow every pod in the vault namespace to use the secret kv store
              - name: default
                bound_service_account_names: ["kubernetes-external-secrets", "vault-secrets-webhook", "vault", "default"]
                # NOTE: bound_service_account_namespaces - https://github.com/banzaicloud/bank-vaults/issues/1226
                bound_service_account_namespaces: ["shared", "vault", "vault-secrets-webhook"]
                token_policies: ["allow-read-all-secrets"]
                ttl: 1h

        groups:
          {{- range $teamId, $team := $tc.teams }}
          - name: team-{{ $teamId }}
            type: external
            policies: [allow-team-{{ $teamId }}]
            metadata: {}
          {{- end }}
          - name: team-admin
            type: external
            policies: [allow-all-secrets]
            metadata: {}
        group-aliases:
          {{- range $teamId, $team := $tc.teams }}
          - name: team-{{ $teamId }}
            group: team-{{ $teamId }}
            mountpath: oidc/
          {{- end }}
          - name: team-admin
            group: team-admin
            mountpath: oidc/
        secrets:
          - path: secret
            type: kv
            description: General secrets.
            options:
              version: 2

        # Allows writing some secrets to Vault (useful for development purposes).
        # See https://www.vaultproject.io/docs/secrets/kv/index.html for more information.
        startupSecrets:
        {{- range $teamId, $team := $tc.teams }}
          - type: kv
            path: secret/data/teams/team-{{ $teamId }}/otomi-welcome
            data:
              data:
                HELLO: "Welcome {{ $teamId }} team"
        {{- end }}
          - type: kv
            path: secret/data/teams/team-admin/otomi-welcome
            data:
              data:
                HELLO: "Welcome admin team"
      vaultEnvsConfig:
        - name: VAULT_LOG_LEVEL
          value: debug
        - name: VAULT_STORAGE_FILE
          value: "/vault/file"

      # If you are using a custom certificate and are setting the hostname in a custom way
      # sidecarEnvsConfig:
      #   - name: VAULT_ADDR
      #     value: https://vault.local:8200

      # # https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
      # vaultPodSpec:
      #   hostAliases:
      #   - ip: "127.0.0.1"
      #     hostnames:
      #     - "vault.local"

      # It is possible to override the Vault container directly:
      # vaultContainerSpec:
      #   lifecycle:
      #     postStart:
      #       exec:
      #         command:
      #              - setcap cap_ipc_lock=+ep /vault/plugins/orchestrate

      # Marks presence of Istio, which influences things like port namings
      istioEnabled: true


      # If you are not using a Service Account to authenticate against GCP you can pass in an
      # GCP credentials refering to a Secret with the following configuration block. You have to
      # create the "gcp-sa" secret manually, it has to have a key called "service-account.json"
      # holding the configuration in the following format:
      # https://cloud.google.com/docs/authentication/getting-started
      credentialsConfig:
        {{ if eq $seal.provide "aws" }}
        env: AWS_SHARED_CREDENTIALS_FILE
        path: /etc/aws/credentials
        secretName: {{ $seal.secretName }}
        {{ else if eq $seal.provide "azure" }}
        env: AZURE_AUTH_LOCATION
        path: /etc/azure/credentials
        secretName: {{ $seal.secretName }}
        {{ else if eq $seal.provider "google" }}
        env: GOOGLE_APPLICATION_CREDENTIALS
        path: /etc/gcp/service-account.json
        secretName: {{ $seal.secretName }}
        {{ else }}
        {{- dict }}
        {{ end }}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: vault-file
    spec:
      # https://kubernetes.io/docs/concepts/storage/persistent-volumes/#class-1
      # storageClassName: ""
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi

# RBAC
  - kind: ServiceAccount
    apiVersion: v1
    metadata:
      name: vault
  - kind: Role
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: vault
    rules:
      - apiGroups: [""]
        resources: ["secrets"]
        verbs: ["*"]
      - apiGroups: [""]
        resources: ["pods"]
        verbs: ["get", "update", "patch"]
  - kind: RoleBinding
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: vault
    roleRef:
      kind: Role
      name: vault
      apiGroup: rbac.authorization.k8s.io
    subjects:
      - kind: ServiceAccount
        name: vault
  # This binding allows the deployed Vault instance to authenticate clients
  # through Kubernetes ServiceAccounts (if configured so).
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: vault-auth-delegator
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: system:auth-delegator
    subjects:
      - kind: ServiceAccount
        name: vault
        namespace: vault
