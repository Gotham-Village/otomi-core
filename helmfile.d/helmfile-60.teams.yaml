bases:
  - snippets/defaults.gotmpl
---
{{- $v := .Environment.Values }}
{{- $stack := $v | get "stack" dict }}
{{- $cluster := $v.cluster }}
{{- $adminDomain := printf "%s%s.%s" $cluster.teamPrefix "admin" $cluster.domain }}
{{- $cm := index $v.charts "cert-manager" }}
{{- $po := index $v.charts "prometheus-operator" }}
{{- $tc := $v.teamConfig }}
releases:
  - name: team-ns-admin
    installed: true
    namespace: team-admin
    chart: ../charts/team-ns
    labels:
      tag: teams
    values:
      - name: admin
        cluster: {{- $cluster | toYaml | nindent 10 }}
        domain: {{ $adminDomain }}
        certStage: {{ $cm.stage }}
        services: {{- $v.services | toYaml | nindent 10 }}
        proxies: {{- $v.proxies | toYaml | nindent 10 }}
        resourceQuota: null
        knative:
          enabled: {{ ge $v.cluster.k8sVersion 1.15 | toYaml }}
        ingress: {{- $v.ingress | toYaml | nindent 10 }}
  {{- range $t, $team := $tc.teams }}
  {{- $domain := printf "%s%s.%s" $cluster.teamPrefix $team.name $cluster.domain }}
  {{- $azure := $team | get "azure" dict }}
  - name: team-ns-{{ $team.name }}
    installed: true
    namespace: team-{{ $team.name }}
    chart: ../charts/team-ns
    labels:
      tag: teams
    values:
      - cluster: {{- $cluster | toYaml | nindent 10 }}
        domain: {{ $domain }}
        certStage: {{ $cm.stage }}
        knative:
          enabled: {{ $cluster.hasKnative }}
      - {{- $team | toYaml | nindent 8 }}
      - services: {{- concat $tc.services ($team | get "services" list) | toYaml | nindent 12 }}
        {{- if $cluster.isMultitenant }}
        {{- if ($team | get "cicd.enabled" "false") }}
        {{- $cicdFlavour := ($team | get "cicd.type" "drone") }}
        {{- if eq $cicdFlavour "drone" }}
        # @todo: fix this weirdness: the next two lines fook the yaml parser:
        # - name: drone
        #   svc: drone-{{ $team.name }}
        {{- end }}
        {{- end }}
        {{- if ne (len ($team | get "sites" list)) 0 }}
        - name: blackbox
          svc: prom-blackbox-exporter
          port: 9115
        {{- end }}
        {{- end }}
  {{- if $cluster.isMultitenant }}        
  - name: prometheus-{{ $team.name }}
    {{- $promHost := printf "prometheus.%s" $domain }}
    {{- $alertsHost := printf "alertmanager.%s" $domain }}
    {{- $grafanaHost := printf "grafana.%s"  $domain }}
    installed: true
    namespace: team-{{ $team.name }}
    chart: ../charts/prometheus-operator
    labels:
      tag: teams
    values:
      - ../values/prometheus-operator/prometheus-operator.gotmpl
      - ../values/prometheus-operator/prometheus-operator-team.gotmpl
      - nameOverride: {{ $team.name }}-po
        fullnameOverride: {{ $team.name }}-po
        alertmanager:
          alertmanagerSpec:
            externalUrl: https://{{ $alertsHost }}
          config:
            {{- $receiver := ($team | get "receiver" ($po.alertmanager | get "receiver" "slack")) }}
            {{- if eq $receiver "slack" }}
            global:
              slack_api_url: {{ $team | get "slack.url" ($po.alertmanager | get "slack.url" $v.redkubesSlackUrl) }}
            {{- end }}
            receivers:
              - name: "null"
              {{- if eq $receiver "slack" }}
              {{- $channel := $team | get "slack.channel" "mon-otomi" }}
              - name: default
                slack_configs:
                  - channel: "#{{ $team | get "slack.channel" "mon-otomi" }}"
                    {{- readFile "../values/prometheus-operator/slack-configs.yaml" | replace "__CUSTOMER" $v.customerLabels.customer | nindent 20 | replace "__CLOUD" $cluster.provider | replace "__CLUSTER" $cluster.name }}
              - name: critical
                slack_configs:
                  - channel: "#{{ $team | get "slack.channel" "mon-otomi" }}-crit"
                    {{- readFile "../values/prometheus-operator/slack-configs.yaml" | replace "__CUSTOMER" $v.customerLabels.customer | nindent 20 | replace "__CLOUD" $cluster.provider | replace "__CLUSTER" $cluster.name }}
              {{- else }}
              {{ $suffix := (hasKey $team "receiver") | ternary "" ".monitoring.svc.cluster.local" }}
              - name: default
                webhook_configs:
                  - url: "http://prometheus-msteams{{ $suffix }}:2000/low_priority_channel"
                    send_resolved: true
              - name: critical
                webhook_configs:
                  - url: "http://prometheus-msteams{{ $suffix }}:2000/high_priority_channel"
                    send_resolved: true
              {{- end }}
              - name: critical-redkubes
              {{- if and $cluster.isRedkubesMonitored (hasKey $team "receiver") }}
                # sending team criticals also to redkubes to be aware of team issues
                slack_configs:
                  - channel: "#mon-otomi-crit"
                    api_url: {{ $v.redkubesSlackUrl }}
                    {{- readFile "../values/prometheus-operator/slack-configs.yaml" | nindent 20 | replace "__CUSTOMER" $v.customerLabels.customer | replace "__CLOUD" $cluster.provider | replace "__CLUSTER" $cluster.name }}
              {{- end }}
        prometheus:
          prometheusSpec:
            externalUrl: https://{{ $promHost }}
            ruleNamespaceSelector:
              matchLabels:
                name: team-{{ $team.name }}
            podMonitorNamespaceSelector:
              matchLabels:
                name: team-{{ $team.name }}
            serviceMonitorNamespaceSelector:
              matchLabels:
                name: team-{{ $team.name }}
        grafana:
          nameOverride: {{ $team.name }}-po-grafana
          fullnameOverride: {{ $team.name }}-po-grafana
          grafana.ini:
            server:
              root_url: https://{{ $grafanaHost }}
            {{- if hasKey $team "oidc" }}
            "auth.generic_oauth":
              client_id: {{ $team.oidc.clientID }}
              client_secret: {{ $team.oidc.clientSecret }}
            {{- end }}
          additionalDataSources:
            - name: Prometheus-Istio
              editable: false
              type: prometheus
              access: proxy
              url: http://prometheus.istio-system:9090
            - name: Loki
              editable: false
              type: loki
              access: proxy
              url: http://loki.monitoring:11811
              basicAuth: true
              basicAuthUser: {{ $team.name }}
              basicAuthPassword: {{ $team.password }}
            {{- if $stack | get "enabled.sitespeed" false }}
            - name: Graphite
              editable: false
              type: graphite
              access: proxy
              url: http://graphite.monitoring:80
            {{- end }}
            {{- if and (eq $cluster.provider "azure") ($team | get "azure.monitor" false) }}
            {{- $monitor := (($team | get "azure.monitor.useAdmin" false) | ternary ($v.azure | getOrNil "monitor") ($team | getOrNil "azure.monitor")) }}
            {{- with $monitor }}
            - name: Azure Monitor
              type: grafana-azure-monitor-datasource
              # orgId: 1
              # typeLogoUrl: public/plugins/grafana-azure-monitor-datasource/img/logo.jpg
              access: proxy
              # url: /api/datasources/proxy/2
              # isDefault: true
              jsonData:
                cloudName: azuremonitor
                subscriptionId: {{ $v.azure.subscriptionId }}
                tenantId: {{ $v.azure.tenantId }}
                clientId: {{ .clientId }}
                logAnalyticsTenantId: {{ . | get "logAnalyticsTenantId" $v.azure.tenantId }}
                logAnalyticsClientId: {{ . | get "logAnalyticsClientId" .clientId }}
                logAnalyticsDefaultWorkspace: {{ .logAnalyticsWorkspace }}
                appInsightsAppId: {{ . | getOrNil "appInsightsAppId" }}
                azureLogAnalyticsSameAs: true
              secureJsonData:
                clientSecret: {{ .clientSecret }}
                logAnalyticsClientSecret: {{ . | get "logAnalyticsClientSecret" .clientSecret }}
                appInsightsAppSecret: {{ . | get "appInsightsAppSecret" .clientSecret }}
              editable: false
            {{- end }}
            {{- end }}
  - name: prometheus-msteams-{{ $team.name }}
    installed: {{ eq ($team | get "receiver" "slack") "msteams" }}
    namespace: team-{{ $team.name }}
    chart: ../charts/prometheus-msteams
    labels:
      tag: teams
    values:
      - ../values/prometheus-msteams/prometheus-msteams.gotmpl
      - ../values/default.gotmpl
      - commonLabels:
          team: {{ $team.name }}
        metrics:
          serviceMonitor:
            additionalLabels:
              release: prometheus-{{ $team.name }}
        connectors:
          - high_priority_channel: {{ $team | get "msteams.highPrio" ($po | get "alertmanager.msteams.highPrio") }}
          - low_priority_channel: {{ $team | get "msteams.lowPrio" ($po | get "alertmanager.msteams.lowPrio") }}

  - name: grafana-dashboards-{{ $team.name }}
    installed: true
    namespace: team-{{ $team.name }}
    chart: ../charts/grafana-dashboards
    labels:
      tag: teams
    values:
      - ../values/grafana-dashboards/grafana-dashboards.gotmpl
      - ../values/default.gotmpl
      - cluster: {{- $cluster | toYaml | nindent 10 }}
        team: {{ $team.name }}
        folders:
          - k8s
          - istio
          {{- if and (eq $cluster.provider "azure") (hasKey $azure "monitor") }}
          - azure{{ end }}
          {{- if $team | get "stack.sitespeed" false }}
          - sitespeed{{ end }}

  - name: index-{{ $team.name }}
    installed: true
    namespace: team-{{ $team.name }}
    chart: ../charts/index
    labels:
      tag: teams
      pkg: index
    values:
      - ../values/index/index.gotmpl
      - ../values/default.gotmpl
      - domain: {{ $domain }}
        group: {{ $team.name }}
        coreServices:
          {{- range $s := $tc.services }}
          {{- if and (not (eq $s.name "index")) (not (index $s "isAuthProxy")) (not (index $s "internal")) }}
          - {{ $s | toYaml | replace "#NS#" (printf "team-%s" $team.name) | nindent 12 }}
          {{- end }}
          {{- end }}
        services: {{- $team | get "services" list | toYaml | nindent 10 }}
  {{- if ($team | get "cicd.enabled" "false") }}
  {{- $cicdFlavour := ($team | get "cicd.type" "drone") }}
  {{- if eq $cicdFlavour "drone" }}
  # - name: drone-{{ $team.name }}
  #   installed: true # @todo: set up values and enable
  #   namespace: team-{{ $team.name }}
  #   chart: ../charts/drone
  #   labels:
  #     tag: teams
  #     pkg: cicd
  #   values:
  #     - ../values/drone/drone.gotmpl
  #     - ../values/default.gotmpl
  #     - env:
  #         DRONE_SERVER_PROXY_HOST: proxy.{{ $domain }}/drone

  {{- end }}
  {{- end }}
  {{- end }}
  - name: oauth2-proxy-team-{{ $team.name }}
    installed: true
    namespace: istio-system
    chart: ../charts/oauth2-proxy
    labels:
      tag: teams
      pkg: oauth2-proxy
    values:
      - ../values/oauth2-proxy/oauth2-proxy.gotmpl
      - ../values/default.gotmpl
      - fullnameOverride: oauth2-proxy-team-{{ $team.name }}
        {{- if hasKey $team "oidc" }}
        config:
          clientID: {{ $team.oidc.clientID }}
          clientSecret: {{ $team.oidc.clientSecret }}
        {{- end }}
        extraArgs:
          whitelist-domain: {{ $domain }}
          redirect-url: https://auth.{{ $domain }}/oauth2/callback
          cookie-domain: {{ $domain }}
  {{- end }}
