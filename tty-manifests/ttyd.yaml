apiVersion: v1
data:
  kconfig.sh: |
    # Creating the kubeconfig file needed for k9s
    mkdir "${HOME}/.kube"
    KUBECONFIG="${HOME}/.kube/config"
    TOKEN="$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)"
    CA_CRT="$(base64 -w 0 /var/run/secrets/kubernetes.io/serviceaccount/ca.crt)"

    cat <<EOF > "${KUBECONFIG}"
    apiVersion: v1
    kind: Config
    clusters:
    - name: otomi
      cluster:
        certificate-authority-data: ${CA_CRT}
        server: https://kubernetes.default.svc.cluster.local
    contexts:
    - name: default-context
      context:
        cluster: otomi
        namespace: default
        user: team-demo-user
    current-context: default-context
    users:
    - name: team-demo-user
      user:
        token: ${TOKEN}
    EOF
    # Creating an alias for k9s with the the team namespace and resources to load. 
    # If not they have to be passed as arguments
    echo "alias k9s='k9s -n team-dev -c pod'" >> ~/.profile
    source ~/.profile
kind: ConfigMap
metadata:
  name: kconfig
  namespace: team-admin
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: tty-18647
  name: tty-18647
  namespace: team-admin
spec:
  selector:
    matchLabels:
      app: tty-18647
  strategy: {}
  template:
    metadata:
      labels:
        app: tty-18647
    spec:
      serviceAccountName: tty-18647
      volumes:
        - name: kconfig
          configMap:
            name: kconfig
      containers:
        - image: ani509/otomi-ttyd
          resources:
            requests:
              memory: '128Mi'
              cpu: '250m'
            limits:
              memory: '256Mi'
              cpu: '500m'
          name: cloudshell-debian
          volumeMounts:
            - name: kconfig
              mountPath: /etc/kconfig
          command:
            - su
            - '-'
            - user
            - -c
            - sh /etc/kconfig/kconfig.sh && ttyd -w /home/user -m 1 -u 1000 -g 1000 -p 8080 sh
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: team-admin-role
  namespace: team-admin
rules:
  - apiGroups:
      - ''
    resources:
      - '*'
    verbs:
      - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: tty-admin-rolebinding
  namespace: team-dev
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: tty-admin
subjects:
  - kind: ServiceAccount
    name: tty-18647
    namespace: team-admin
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tty-18647
  namespace: team-admin
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: tty-18647
  name: tty-18647
  namespace: team-admin
spec:
  ports:
    - name: 8080-8080
      port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    app: tty-18647
  type: ClusterIP
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: tty-18647
  namespace: team-admin
spec:
  gateways:
    - team-admin/team-admin-public-tlsterm
  hosts:
    - tty.192.168.64.101.nip.io
  http:
    - match:
        - uri:
            prefix: /logout-otomi
      redirect:
        authority: auth.192.168.64.101.nip.io
        uri: /oauth2/sign_out?rd=https://keycloak.192.168.64.101.nip.io/realms/otomi/protocol/openid-connect/logout?redirect_uri=https://otomi.192.168.64.101.nip.io
    - match:
        - uri:
            prefix: /18647
      rewrite:
        uri: /
      route:
        - destination:
            host: tty-18647.team-admin.svc.cluster.local
            port:
              number: 8080
          headers:
            request:
              set:
                X-Forwarded-Proto: https
---

